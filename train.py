# -*- coding: utf-8 -*-
"""train.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iwL55k8dQGNiTQx4nnvgfFYgIJmURKyI
"""

import numpy as n
import torch
import torchvision.models as models
import torch.nn as nn
from torch.utils.tensorboard import SummaryWriter
from MyNetwork import SkipCombination
from MyNetwork import SkipCombination_DownSample
from MyNetwork import MyResNet34
import numpy as np
import pandas as pd
import io
from google.colab import files
import os
import shelve
from sklearn.model_selection import train_test_split
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# upload the data
upload_data_folder = files.upload()
# unzip the data
! unzip DecodedData.zip 




# Read training data
with shelve.open('TrainData', flag='r') as file:
    images = file['images'] # N, H, W
    labels = file['labes']
# Change dimension of training data
images = np.expand_dims(images, axis=1) # N, C, H, W
# Data augmentation setup
datagen = ImageDataGenerator(
        rotation_range=10,  
        zoom_range = 0.1,  
        width_shift_range=0.1, 
        height_shift_range=0.1)
augmented_data = []
augmented_label = []
num_augmented = 0
batch_size = 20000
# train-validation split (15% of the data as validation set)
train_images, validation_images, train_labels, validation_labels = train_test_split(images, labels, test_size=0.15)
# data augmentation based on the training data to create a training set with 1,600,000 images
for X_batch, y_batch in datagen.flow(train_images, train_labels, batch_size = 20000, shuffle = False):
   augmented_data.append(X_batch)
   augmented_label.append(y_batch)
   num_augmented += batch_size
   print(num_augmented)
   if num_augmented == 1200000:
    break
augmented_data = np.concatenate(augmented_data)
augmented_label = np.concatenate(augmented_label)
# concatenate with the original training images
augmented_data = np.concatenate((augmented_data,train_images))
augmented_label = np.concatenate((augmented_label,train_labels))
# call the resnet model
network = MyResNet34()
# train the resnet model
network.trainModel(augmented_data, augmented_label,validation_images,validation_labels, './log_resnet34/log_resnet34')

"""The next chunk of code is to indicate how to open up the tensorboard after training is completed, and how the model is effectively stored into the local directory."""

# Commented out IPython magic to ensure Python compatibility.
# load tensorboard on colab environment
# %reload_ext tensorboard
# %tensorboard --logdir=log_resnet34

# save torch model checkpoint
torch.save(network.state_dict(), 'checkpoint.pth')

# download checkpoint file
from google.colab import files
files.download('checkpoint.pth')